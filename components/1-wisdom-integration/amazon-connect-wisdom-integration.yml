# © 2023 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.  
# This AWS Content is provided subject to the terms of the AWS Customer Agreement available at  
# http://aws.amazon.com/agreement or other written agreement between Customer and either
# Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.
# Version Info: 2023.09.20
# This AWS CloudFormation template will provision the resources required to deploy Amazon Connect Wisdom using Amazon S3 as a Knowledge base.  
# This CloudFormation Template will use a Custom Resource to Establish a Connect-Wisdom Integration

AWSTemplateFormatVersion: 2010-09-09
Description: >
    Amazon Connect Wisdom Integration Template - With Wisdom Resources. 2023.09.20.beta
    If Wisdom is already deployed, then the CloudFormation Template will not create any resources or integrations.
    If Wisdom is not deployed, then this CloudFormation Template creates Wisdom Resources and integrate them with an Amazon Connect Instance.

Parameters:
  AmazonConnectInstanceARN:
    Type: String
    Description: "Enter your Amazon Connect Instance ARN"
    Default: "arn:aws:connect:REGION:ACCOUNTID:instance/INSTANCEID"

Outputs:
  # Wisdom Assistant
  WisdomAssistantARN:
    Description: "Wisdom Assistant ARN"
    Value: !GetAtt WisdomAssistant.AssistantArn

  # Wisdom KnowledgeBase
  WisdomKnowledgeBaseARN:
    Description: "Wisdom Knowledgebase ARN"
    Value:  !GetAtt WisdomKnowledgeBase.KnowledgeBaseArn

  # Wisdom Assistant-Knowledgebase Association ARN
  WisdomAssistantKnowledgebaseAssociationARN:
    Description: "Wisdom Assistant<->Knowledgebase Association ARN"
    Value: !GetAtt WisdomAssistantAssociation.AssistantAssociationArn

  # Section 3: Connect - Integration Outputs.
  ConnectWisdomIntegrationHandlerARN:
    Description: "Wisdom Constructs Lambda Handler"
    Value: !GetAtt ConnectWisdomIntegration.Arn

  ConnectAssistantIntegrationAssociationARN:
    Description: "Amazon Connect - Wisdom Assistant - Integration Association ARN"
    Value:  !GetAtt InvokeConnectWisdomIntegration.Connect_WisdomAssistant_IntegrationAssociationARN
    
  WisdomKnowledgeBaseIntegrationAssociationARN:
    Description: "Amazon Connect - Wisdom Knowledgebase - Integration Association ARN"
    Value:  !GetAtt InvokeConnectWisdomIntegration.Connect_WisdomKnowledgeBase_IntegrationAssociationARN

Resources:
  ##################################################### 
  # Section 1: Create Wisdom CloudFormation Resources
  # Docs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/AWS_Wisdom.html
  # Required Parameters: None
  ##################################################### 

  # 1.1 Create Wisdom Assistant
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistant.html
  # Outputs: !GetAtt AssistantArn, AssistantId
  WisdomAssistant:
    Type: AWS::Wisdom::Assistant
    Properties: 
      Name: !Sub 
        - 'Wisdom-Assistant-${UUID}'
        - UUID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      Type: "AGENT"
      Description: Amazon Connect Wisdom Assistant created by Wisdom S3 Sync
      Tags: 
        - Key: "UUID"
          Value: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      
  # 1.2 Create Wisdom Knowledgebase
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-knowledgebase.html
  # Output: !GetAtt KnowledgeBaseArn, KnowledgeBaseId
  WisdomKnowledgeBase:
    Type: AWS::Wisdom::KnowledgeBase
    Properties: 
      Name: !Sub 
        - 'Wisdom-KnowledgeBase-${UUID}'
        - UUID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      KnowledgeBaseType: "CUSTOM" # CUSTOM | EXTERNAL
      Description: Amazon Connect Wisdom Knowledge Base created by Wisdom S3 Sync
      Tags: 
        - Key: "UUID"
          Value: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]

  # 1.3 Create Assistant Association between Assistant and Knowledgebase
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-wisdom-assistantassociation.html
  # Outputs: !GetAtt - AssistantArn, AssistantAssociationArn, AssistantAssociationId
  WisdomAssistantAssociation:
    Type: AWS::Wisdom::AssistantAssociation
    Properties: 
      AssistantId: !GetAtt WisdomAssistant.AssistantId
      Association: 
        KnowledgeBaseId: !GetAtt WisdomKnowledgeBase.KnowledgeBaseId
      AssociationType: "KNOWLEDGE_BASE"
      Tags: 
        - Key: "UUID"
          Value: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
  
  ##################################################### 
  # Section 2 (Custom Resource): Integrate Amazon Connect Wisdom Assistant and Knowledgebase with Amazon Connect
  # Required Parameters:
  # - AmazonConnectInstanceARN   
  # - WisdomAssistant (Resources)
  # - WisdomKnowledgeBase (Resources)
  ##################################################### 
  ConnectWisdomIntegrationRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      RoleName: !Sub
        - 'ConnectWisdomIntegrationRole-${UUID}'
        - UUID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Connect_Wisdom_Integration_Policy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # IAM Policy to allow Lambda to update Service Linked Roles
              - Effect: Allow
                Action:
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:AttachRolePolicy
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/connect.amazonaws.com/*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/wisdom.amazonaws.com/*'
              - Effect: Allow
                Action:
                  - connect:DescribeInstance
                  - connect:CreateIntegrationAssociation
                  - connect:ListIntegrationAssociations
                  - connect:DeleteIntegrationAssociation
                  - connect:ListTagsForResource
                  - connect:TagResource
                  - connect:UntagResource
                Resource:
                  - !Sub '${AmazonConnectInstanceARN}'
                  - !Sub '${AmazonConnectInstanceARN}/integration-association/*'
              - Effect: Allow
                Action:
                  - wisdom:ListAssistantAssociations
                  - wisdom:GetAssistant
                  - wisdom:GetKnowledgeBase
                  - wisdom:CreateAssistantAssociation
                  - wisdom:DeleteAssistant
                  - wisdom:DeleteKnowledgeBase
                  - wisdom:DeleteAssistantAssociation
                Resource:
                  - !Sub 'arn:aws:wisdom:${AWS::Region}:${AWS::AccountId}:assistant/*'
                  - !Sub 'arn:aws:wisdom:${AWS::Region}:${AWS::AccountId}:knowledge-base/*'
                  - !Sub 'arn:aws:wisdom:${AWS::Region}:${AWS::AccountId}:association/*/*' 
              - Effect: Allow
                Action:
                  - ds:DescribeDirectories # Required for connect:DescribeInstance, connect:ListIntegrationAssociations
                  - wisdom:ListAssistants
                  - wisdom:ListKnowledgeBases
                  - wisdom:CreateAssistant
                  - wisdom:CreateKnowledgeBase
                  - wisdom:ListTagsForResource
                  - wisdom:TagResource
                  - wisdom:UntagResource
                Resource:
                  - "*" # required for these APIs, as they have to take effect on all resources.   

  #####################################################
  # AWS CloudFormation Custom Resource - Invoke Connect Wisdom Integration Handler
  #####################################################
  InvokeConnectWisdomIntegration:
    Type: "Custom::InvokeConnectWisdomIntegration"
    Properties:
      ServiceToken: !GetAtt ConnectWisdomIntegration.Arn
      # STACK_UUID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      INSTANCE_ARN: !Ref AmazonConnectInstanceARN
      WISDOM_ASSISTANT_ARN: !GetAtt WisdomAssistant.AssistantArn
      WISDOM_KNOWLEDGE_BASE_ARN: !GetAtt WisdomKnowledgeBase.KnowledgeBaseArn
      
  #####################################################
  # AWS Lambda: Connect - Wisdom Integration Handler
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-lambda-function-code.html
  # Input: InstanceARN
  #####################################################          
  ConnectWisdomIntegration:
    Type: 'AWS::Lambda::Function'
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      Architectures:
        - "arm64"
      Runtime: python3.11
      Description: 'ConnectWisdomIntegration: Creates Connect Integration Association with Wisdom Resources'
      FunctionName: !Sub
        - 'ConnectWisdomIntegration-${UUID}'
        - UUID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      Handler: index.lambda_handler # use index.lambda_handler for inline functions
      Role: !GetAtt ConnectWisdomIntegrationRole.Arn
      MemorySize: 256
      Timeout: 60
      Environment:
        Variables:
          STACK_UUID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref AWS::StackId]]]]
      Code:
        ZipFile: |
          # © 2023 Amazon Web Services, Inc. or its affiliates. All Rights Reserved.
          # This AWS Content is provided subject to the terms of the AWS Customer Agreement available at
          # http://aws.amazon.com/agreement or other written agreement between Customer and either
          # Amazon Web Services, Inc. or Amazon Web Services EMEA SARL or both.
          # Version Info: 2023.09.12
          # Description: 
          # This AWS Lambda Function will:
          # 1. Check for Existing Amazon Connect Integration Associations - Wisdom.
          # **NOTE**: If the Connect Instance has an existing Integration Association, the Integration Association will be deleted and replaced with the new Integration Association.
          # 2. Create an Amazon Connect Integration Association with an Amazon Connect Wisdom (Assistant and KnowledgeBase).

          # Python License: https://docs.python.org/3/license.html
          import os
          import json

          # CloudFormation Response only available if deployed inline.
          # import cfnresponse # Apache License: https://pypi.org/project/cfnresponse/
          import urllib3 # MIT License: https://pypi.org/project/urllib3/
          http = urllib3.PoolManager()
          SUCCESS = "SUCCESS"
          FAILED = "FAILED"

          # AWS SDK Imports
          import boto3
          from botocore.exceptions import ClientError

          CONNECT_CLIENT = boto3.client('connect')
          WISDOM_CLIENT = boto3.client('wisdom')

          # Define Environment Variables
          STACK_UUID = os.environ["STACK_UUID"] # Substring of CloudFormation StackID. Used to identify and tag resources

          # Description: IF THE CONNECT INSTANCE HAS AN EXISTING INTEGRATION, REMOVE the INTEGRATION ASSOCIATION, REPLACE WITH NEW.
          def lambda_handler(event, context):
              print("Event Recieved: ", json.dumps(event))
              print("Request Type:", event['RequestType'])
              print("Resource Properties: ", json.dumps(event["ResourceProperties"]))

              # Define variables from Custom Resource Event Data
              PHYSICAL_RESOURCE_ID = event["ResourceProperties"]["ServiceToken"]
              # STACK_UUID = event["ResourceProperties"]["STACK_UUID"] # Substring of CloudFormation StackID. Used to identify and tag resources"
              INSTANCE_ARN = event["ResourceProperties"]["INSTANCE_ARN"] # To get InstanceId: INSTANCE_ARN.split("/")[1]
              WISDOM_ASSISTANT_ARN = event["ResourceProperties"]["WISDOM_ASSISTANT_ARN"] 
              WISDOM_KNOWLEDGE_BASE_ARN = event["ResourceProperties"]["WISDOM_KNOWLEDGE_BASE_ARN"]

              # Check for existing Integrations: List Integration Association - Wisdom Assistant / Knowledge Base
              # Full Assistant/KnowledgeBase Integration Association Object: [{'IntegrationAssociationId': 'string', 'IntegrationAssociationArn': 'string', 'InstanceId': 'string', 'IntegrationType': 'WISDOM_ASSISTANT', 'IntegrationArn': 'string'}]
              connectWisdomAssistantIntegration = listIntegrationAssociations(instanceId=INSTANCE_ARN, integrationType="WISDOM_ASSISTANT")
              connectWisdomKnowledgeBaseIntegration = listIntegrationAssociations(instanceId=INSTANCE_ARN, integrationType="WISDOM_KNOWLEDGE_BASE")
              print("Connect Integration - Wisdom Assistant ", json.dumps(connectWisdomAssistantIntegration))    
              print("Connect Integration - Wisdom Knowledgebase ", json.dumps(connectWisdomKnowledgeBaseIntegration))

              # Define shared ResponseData Expected by CloudFormation Response:
              responseData = {
                  "Connect_WisdomAssistant_IntegrationAssociationARN": "", # Connect Integration Association - Wisdom Assistant
                  "Connect_WisdomKnowledgeBase_IntegrationAssociationARN": "", # Connect Integration Association - Wisdom KnowledgeBase
                  "Wisdom_Assistant_ARN": "", # Amazon Connect Integration Association - Wisdom Assistant
                  "Wisdom_KnowledgeBase_ARN": "", # Amazon Connect Integration Association - Wisdom KnowledgeBase
              }

              # Case 1: CloudFormation Stack sends Create or Update Event.
              if event["RequestType"] == "Create" or event["RequestType"] == "Update":
                  # Case 1: If the Connect Instance has existing Wisdom Integrations (both Assistant and KnowledgeBase) return those values.
                  if len(connectWisdomAssistantIntegration) and len(connectWisdomKnowledgeBaseIntegration):
                      # Roadmap: Delete Existing Integration Associations, create new Integration Associations with resources.
                      print("Connect Instance: ", INSTANCE_ARN, " has existing Wisdom integrations.")

                      # Return previous Integration Association Data
                      responseData["Previous_Connect_WisdomAssistant_IntegrationAssociation"] = str(connectWisdomAssistantIntegration[0])
                      responseData["Previous_Wisdom_Assistant_ARN"] = str(connectWisdomAssistantIntegration[0]['IntegrationArn'])
                      responseData["Previous_Connect_WisdomKnowledgeBase_IntegrationAssociation"] = str(connectWisdomKnowledgeBaseIntegration[0])
                      responseData["Previous_Wisdom_KnowledgeBase_ARN"] = str(connectWisdomKnowledgeBaseIntegration[0]['IntegrationArn'])
                  
                      deleteConnectWisdomAssistantIntegration = deleteIntegrationAssociation(instanceId=INSTANCE_ARN, integrationAssociationId=connectWisdomAssistantIntegration[0]['IntegrationAssociationId'])
                      print("Delete Complete: Amazon Connect Integration Association - Wisdom Assistant: ", connectWisdomAssistantIntegration[0]['IntegrationAssociationId'])

                      deleteConnectWisdomKnowledgeBaseIntegration = deleteIntegrationAssociation(instanceId=INSTANCE_ARN, integrationAssociationId=connectWisdomKnowledgeBaseIntegration[0]['IntegrationAssociationId'])
                      print("Delete Complete: Amazon Connect Integration Association - Wisdom KnowledgeBase: ", connectWisdomKnowledgeBaseIntegration[0]['IntegrationAssociationId'])
                  else:
                      print("Connect Instance: ", INSTANCE_ARN, " has no existing Wisdom integrations.")
                  
                  # Step 2: Create new Integration Associations with provided Wisdom Assistant and Knowledge Base
                  # At this point, Connect Instance has no existing Wisdom Integrations.
                  if len(WISDOM_ASSISTANT_ARN) > 0:
                      connectWisdomAssistantIntegration = createIntegrationAssociation(INSTANCE_ARN, WISDOM_ASSISTANT_ARN, 'WISDOM_ASSISTANT')
                      print("Connect Integration - Wisdom Assistant. Create Integration Association Response: ", connectWisdomAssistantIntegration)
                      if connectWisdomAssistantIntegration['status'] == "SUCCESS":
                          responseData["Connect_WisdomAssistant_IntegrationAssociationARN"] = connectWisdomAssistantIntegration['IntegrationAssociationArn']
                          responseData["Wisdom_Assistant_ARN"] = WISDOM_ASSISTANT_ARN
                  else:
                      print("Wisdom Assistant ARN not provided. Skipping Integration Association Creation.")

                  if len(WISDOM_KNOWLEDGE_BASE_ARN) > 0:
                      connectWisdomKnowledgeBaseIntegration = createIntegrationAssociation(INSTANCE_ARN, WISDOM_KNOWLEDGE_BASE_ARN, 'WISDOM_KNOWLEDGE_BASE')
                      print("Connect Integration - Wisdom KnowledgeBase. Create Integration Association Response: ", connectWisdomKnowledgeBaseIntegration)
                      if connectWisdomKnowledgeBaseIntegration['status'] == "SUCCESS":
                          responseData["Connect_WisdomKnowledgeBase_IntegrationAssociationARN"] = connectWisdomKnowledgeBaseIntegration['IntegrationAssociationArn']
                          responseData["Wisdom_KnowledgeBase_ARN"] = WISDOM_KNOWLEDGE_BASE_ARN
                  else:
                      print("Wisdom KnowledgeBase ARN not provided. Skipping Integration Association Creation.")

                  # Send CFN Response
                  print("Create/Update - Wisdom Integration Handler Response: ", json.dumps(responseData))
                  send(event, context, "SUCCESS", responseData, PHYSICAL_RESOURCE_ID)
                  return responseData
              
              # CloudFormation Stack sends DELETE signal - Delete Connect Integration Associations.
              # DELETE - ORDER OF OPERATIONS: 1) Connect-Assistant Integration, 2) Connect-Knowledgebase Integration, 3) Wisdom Assistant-Knowledgebase Association, 4) Wisdom Assistant, 5) Wisdom Knowledgebase
              if event["RequestType"] == "Delete":
                  # Case 1: If the Connect Instance has Wisdom Integration Associations (WISDOM_ASSISTANT, WISDOM_KNOWLEDGE_BASE), delete resources.
                  if len(connectWisdomAssistantIntegration):
                      response = deleteIntegrationAssociation(INSTANCE_ARN, connectWisdomAssistantIntegration[0]["IntegrationAssociationId"])
                      print("Connect Integration - Wisdom Assistant. Delete Integration Association Response: ", str(response))

                  if len(connectWisdomKnowledgeBaseIntegration):
                      response = deleteIntegrationAssociation(INSTANCE_ARN, connectWisdomKnowledgeBaseIntegration[0]["IntegrationAssociationId"])
                      print("Connect Integration - Wisdom KnowledgeBase. Delete Integration Association Response: ", str(response))
                  
                  # Send CFN Response
                  print("Delete - Wisdom Integration Handler Response: ", json.dumps(responseData))
                  send(event, context, "SUCCESS", responseData, PHYSICAL_RESOURCE_ID)
                  return responseData

          # List Amazon Connect Instance Integration Associations (Accepts either Instance ID or ARN)
          # https://docs.aws.amazon.com/connect/latest/APIReference/API_ListIntegrationAssociations.html
          def listIntegrationAssociations(instanceId, integrationType):
              CONNECT_CLIENT = boto3.client('connect')
              try:
                  response = CONNECT_CLIENT.list_integration_associations(
                      InstanceId=instanceId,
                      IntegrationType=integrationType
                  )
                  return response["IntegrationAssociationSummaryList"]
              except ClientError as e:
                  print(e)
                  return {'status': "CLIENT_ERROR", 'Message': str(e)}
              except Exception as ex:
                  print(ex)
                  return {'status': "EXCEPTION", 'Message': str(ex)}

          # Integrates a WISDOM_KNOWLEDGE_BASE or WISDOM_ASSISTANT with an Amazon Connect Instance
          # https://docs.aws.amazon.com/connect/latest/APIReference/API_CreateIntegrationAssociation.html
          def createIntegrationAssociation(instanceId, integrationArn, integrationType):
              print("Creating Integration Association between Connect Instance: ", instanceId, " and the Wisdom Resource: ", integrationArn, " with Integration Type: ", integrationType, " and UUID Tag: ", STACK_UUID)
              try:
                  response = CONNECT_CLIENT.create_integration_association(
                      InstanceId = instanceId,
                      IntegrationArn = integrationArn,
                      IntegrationType = integrationType,
                      Tags={ "UUID": STACK_UUID }
                  )
                  response["status"] = "SUCCESS"
                  return response
              except ClientError as e:
                  return {'status': "CLIENT_ERROR", 'Message': str(e)}
              except Exception as ex:
                  return {'status': "EXCEPTION", 'Message': str(ex)}

          # Delete a Connect - Wisdom Integration Association (Assistant or KnowledgeBase)
          # https://docs.aws.amazon.com/connect/latest/APIReference/API_DeleteIntegrationAssociation.html
          def deleteIntegrationAssociation(instanceId, integrationAssociationId):
              print("Deleting Integration Association between Connect Instance: ", instanceId, " and the Wisdom Resource: ", integrationAssociationId)
              try:
                  response = CONNECT_CLIENT.delete_integration_association(InstanceId=instanceId, IntegrationAssociationId=integrationAssociationId)
                  return {'status': "SUCCESS", 'Message': str("Integration Association, " + integrationAssociationId + ", deleted successfully")}
              except ClientError as e:
                  return {'status': "CLIENT_ERROR", 'Message': str(e)}
              except Exception as ex:
                  return {'status': "EXCEPTION", 'Message': str(ex)}

          # Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
          # SPDX-License-Identifier: MIT-0
          # CloudFormation Response Helper Function: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
          def send(event, context, responseStatus, responseData, physicalResourceId=None, noEcho=False, reason=None):
              responseUrl = event['ResponseURL']
              print(responseUrl)
              
              responseBody = {
                  'Status' : responseStatus,
                  'Reason' : reason or "See the details in CloudWatch Log Stream: {}".format(context.log_stream_name),
                  'PhysicalResourceId' : physicalResourceId or context.log_stream_name,
                  'StackId' : event['StackId'],
                  'RequestId' : event['RequestId'],
                  'LogicalResourceId' : event['LogicalResourceId'],
                  'NoEcho' : noEcho,
                  'Data' : responseData
              }
              json_responseBody = json.dumps(responseBody)
              print("Response body: ", json_responseBody)

              headers = {
                  'content-type' : '',
                  'content-length' : str(len(json_responseBody))
              }

              try:
                  response = http.request('PUT', responseUrl, headers=headers, body=json_responseBody)
                  print("Status code:", response.status)
              except Exception as e:
                  print("send(..) failed executing http.request(..):", e)